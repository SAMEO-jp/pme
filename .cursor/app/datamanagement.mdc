---
description: 
globs: 
alwaysApply: false
---
# データベース管理システム構想
## 0. 🎯 技術スタックと前提

| 項目             | 使用技術・ルール                     |
|------------------|--------------------------------------|
| フロントエンド   | **Next.js 14.1.0（App Router）**     |
| 言語             | **TypeScript 5.3.3**                |
| パッケージ管理   | **pnpm 8.15.4**                     |
| スタイリング     | **Tailwind CSS 3.4.1**              |
| 開発環境管理     | `.nvmrc` にてNode.jsバージョンを固定（v18.18.2） |
| モジュール形式   | `"type": "module"`（ESMを使用）      |
| React            | **React 18.2.0**                    |
| データベース     | **SQLite3 5.1.7**                   |
| UIコンポーネント | **shadcn/ui 0.0.1**                 |
| アイコン         | **Lucide Icons 0.330.0**            |

## 1. システム概要
SQLiteデータベースを操作・管理するためのWebアプリケーション

## 2. 主要機能
### 2.1 テーブル管理
- テーブル一覧の表示
- テーブル構造の表示
- テーブルの作成・削除
- カラム設定の管理

### 2.2 データ操作
- データの閲覧（ページネーション対応）
- データの追加・編集・削除
- 一括削除機能
- データの検索・フィルタリング
- データのソート

### 2.3 インポート/エクスポート
- CSVファイルのインポート
  - 文字コード選択（UTF-8, Shift-JIS, EUC-JP, ISO-8859-1）
  - 重複チェックオプション
  - 新規テーブル作成オプション
- CSVファイルのエクスポート
  - 文字コード選択
  - 選択したデータのみエクスポート

### 2.4 カラム設定
- カラムの表示/非表示
- カラムの並び替え
- カラム幅の調整
- 主キーの設定

## 3. 技術スタック
- Next.js 14.1.0 (App Router)
- React 18.2.0
- TypeScript 5.3.3
- SQLite3 5.1.7
- Tailwind CSS 3.4.1
- shadcn/ui 0.0.1
- Lucide Icons 0.330.0
- pnpm 8.15.4

## 4. 実装計画
### フェーズ1: 基本機能
- [x] データベース接続設定
- [x] テーブル一覧表示
- [x] テーブルデータ表示
- [x] 基本的なCRUD操作

### フェーズ2: 拡張機能
- [ ] CSVインポート/エクスポート
- [ ] カラム設定
- [ ] 検索・フィルタリング
- [ ] ページネーション

### フェーズ3: UI/UX改善
- [ ] エラーハンドリングの強化
- [ ] ローディング状態の改善
- [ ] レスポンシブデザインの最適化
- [ ] アクセシビリティ対応

### フェーズ4: セキュリティ強化
- [ ] 入力値のバリデーション
- [ ] SQLインジェクション対策
- [ ] エラーメッセージの適切な処理

## 5. ファイル構成
```
app/
├── (main)/
│   ├── table_view/
│   │   └── [table]/
│   │       └── index/
│   │           └── page.tsx
│   ├── components/
│   │   ├── TableViewGrid.tsx
│   │   ├── ui/
│   │   │   ├── LoadingSpinner.tsx
│   │   │   ├── ErrorAlert.tsx
│   │   │   ├── ActionButton.tsx
│   │   │   ├── CsvImportModal.tsx
│   │   │   └── AddRecordModal.tsx
│   │   └── layout/
│   │       └── TableViewWrapper.tsx
│   └── globals.css
├── api/
│   └── z_datamanagement/
│       ├── column_config/
│       │   └── route.ts
│       └── table_data/
│           ├── route.ts
│           └── csv/
│               └── route.ts
└── lib/
    └── db.ts
```

## 6. 今後の改善点
1. パフォーマンス最適化
   - 大量データの効率的な処理
   - キャッシュの活用

2. 機能拡張
   - データのバックアップ/リストア
   - テーブル間のリレーション管理
   - カスタムクエリ実行機能

3. ユーザビリティ向上
   - ドラッグ&ドロップによるCSVインポート
   - データのプレビュー機能
   - キーボードショートカット

4. セキュリティ強化
   - ユーザー認証
   - アクセス権限管理
   - 操作ログの記録
