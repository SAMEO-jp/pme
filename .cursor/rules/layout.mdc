---
description: 
globs: 
alwaysApply: false
---
# レイアウトの基本構造

## 1. レイアウトの構成要素
レイアウトは以下の4つの主要なコンポーネントで構成されます：

1. ヘッダー（Header）
   - アプリケーションの最上部に配置
   - ロゴ、ナビゲーション、ユーザー情報などを表示
   - ページごとに色や内容を変更可能

2. サイドバー（Sidebar）
   - 画面左側に配置
   - メインナビゲーションメニュー
   - 階層構造を持つメニュー項目

3. メインタブヘッダー（MainTabHeader）
   - メインコンテンツの上部に配置
   - 主要な機能カテゴリの切り替え
   - 現在のセクションを示す

4. サブタブヘッダー（SubTabHeader）
   - メインタブの下に配置
   - 詳細な機能の切り替え
   - 現在のサブセクションを示す

## 2. レイアウトの実装ルール

### 2.1 ファイル構成
```
app/
├── (main)/
│   ├── layouts/
│   │   ├── RootLayout.tsx        # ルートレイアウト
│   │   ├── components/           # レイアウトコンポーネント
│   │   │   ├── Header/
│   │   │   │   ├── index.tsx
│   │   │   │   └── HeaderNav.tsx
│   │   │   ├── Sidebar/
│   │   │   │   ├── index.tsx
│   │   │   │   └── SidebarNav.tsx
│   │   │   ├── MainTabHeader/
│   │   │   │   ├── index.tsx
│   │   │   │   └── TabNav.tsx
│   │   │   └── SubTabHeader/
│   │   │       ├── index.tsx
│   │   │       └── SubTabNav.tsx
│   │   └── context/             # レイアウトコンテキスト
│   │       └── LayoutContext.tsx
```

### 2.2 コンポーネントの分割ルール

1. 各レイアウトコンポーネントは独立したディレクトリに配置
2. コンポーネントの責務を明確に分離
   - 表示ロジック（index.tsx）
   - ナビゲーションロジック（*Nav.tsx）
3. 共通の状態管理はLayoutContextで一元管理

### 2.3 パフォーマンス最適化

1. レイアウトコンポーネントの再レンダリングを最小限に抑制
   - React.memoの適切な使用
   - コンテキストの分割
2. 動的な変更が必要な部分のみを再レンダリング
   - ページ遷移時のヘッダー色変更
   - アクティブなタブの表示

### 2.4 スタイリングルール

1. Tailwind CSSを使用
2. レイアウト固有のスタイルは各コンポーネントディレクトリ内に配置
3. テーマカラーはtailwind.config.tsで一元管理

## 3. レイアウトの使用ルール

### 3.1 ページでの使用
```tsx
// app/(main)/[app-name]/page.tsx
export default function Page() {
  return (
    <div className="flex flex-col h-full">
      <MainTabHeader />
      <SubTabHeader />
      <main className="flex-1">
        {/* ページコンテンツ */}
      </main>
    </div>
  );
}
```

### 3.2 レイアウトのカスタマイズ

1. ページごとのカスタマイズ
   - ヘッダーの色や内容
   - タブの表示/非表示
   - サイドバーの表示項目

2. コンテキストを使用した動的な変更
```tsx
const { setHeaderColor, setHeaderContent } = useLayoutContext();

// ページ遷移時にヘッダーを更新
useEffect(() => {
  setHeaderColor('blue');
  setHeaderContent(<CustomHeaderContent />);
}, []);
```

## 4. ベストプラクティス

1. レイアウトコンポーネントは純粋な表示コンポーネントとして実装
2. ビジネスロジックは別のコンポーネントに分離
3. パフォーマンスを考慮したコンポーネントの分割
4. アクセシビリティに配慮したマークアップ
5. レスポンシブデザインの実装

## 5. 禁止事項

1. レイアウトコンポーネント内での直接的なデータフェッチ
2. 過度に複雑な状態管理
3. 不必要な再レンダリングの発生
4. インラインスタイルの使用
5. グローバルな状態の直接操作


●libsに配置する場合:
-クラスやモジュールとして実装されている
-状態（state）を持つ
-外部依存性が高い
-複雑なビジネスロジックを含む
-設定や初期化が必要
●utilsに配置する場合:
-純粋な関数（Pure Function）
-状態を持たない
-外部依存性が低い
-シンプルな処理
-即時使用可能
-現在のプロジェクトでの適用例:
●libsに移動すべきもの:
-データベース操作（SQLite）
-ユーザー認証
-プロジェクト管理
-API通信
●utilsに残すべきもの:
-localStorage操作
-日付操作
-文字列フォーマット
-バリデーション
-のように、libsは「大きな機能単位」や「外部依存性の高い処理」を、utilsは「小さなユーティリティ関数」や「純粋な処理」を担当するという原則に基づいて使い分けることができます。


