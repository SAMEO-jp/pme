---
description: 
globs: 
alwaysApply: false
---
🧱 コードスタイルと構成
簡潔で技術的に正確な TypeScript コードを書いてください。例も正確であること。
クラスベースではなく、関数型・宣言的プログラミングを用いてください。
コードの重複は避け、繰り返し処理やモジュール化を優先してください。
isLoading や hasError のように、補助動詞を使った意味のある変数名を使用してください。
ファイル構成は以下の順を基本としてください：
エクスポートされるメインコンポーネント
サブコンポーネント
ヘルパー関数
静的な定数や設定
型定義

🗂 命名規則
ディレクトリ名には 小文字 を使ってください。
コンポーネントは 名前付きエクスポート（named exports） を優先してください。

🟦 TypeScriptの使用方針
すべてのコードを TypeScript で記述してください。
type より interface を優先してください。
enum は使用せず、代わりに マップ（Recordなど） を使用してください。
コンポーネントは 関数型コンポーネントとし、型指定は interface を使ってください。

✍️ 構文とフォーマット
純粋関数には function キーワードを使ってください。
単純な条件式では 不要な中括弧 {} を避けて、簡潔に書いてください。
JSX は 宣言的に記述してください。

🎨 UI とスタイリング
UI の構築には Shadcn UI、Radix UI、Tailwind CSS を使用してください。
モバイルファーストの考え方で、Tailwind を使ってレスポンシブ対応を行ってください。

🚀 パフォーマンス最適化
'use client'、useEffect、setState の使用は最小限に抑え、可能な限り React Server Components（RSC） を使用してください。
クライアントコンポーネントは Suspense + fallback でラップしてください。
重要度の低いコンポーネントは 動的インポート（dynamic import） を使って遅延読み込みしてください。
画像は以下のように最適化してください：
WebP形式を使う
サイズ情報を含める
遅延読み込み（lazy loading）を行う

🔑 その他の原則
URLの検索パラメータの状態管理には nuqs を使用してください。
Web Vitals（LCP・CLS・FID） を最適化してください。
'use client' の使用は以下に限定してください：
基本的には Server Components や Next.jsのサーバーサイドレンダリング（SSR） を優先すること。
Web APIアクセスなど、小さなコンポーネント内でのみ使用すること。
データ取得や状態管理には使わないこと。

📘 準拠ガイドライン

データ取得・レンダリング・ルーティングについては、Next.jsの公式ドキュメントに従ってください。